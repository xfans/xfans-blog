<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on </title>
    <link>//localhost:1313/tags/android/</link>
    <description>Recent content in Android on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 11 Jun 2025 09:46:51 +0800</lastBuildDate>
    <atom:link href="//localhost:1313/tags/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Direct local .aar file dependencies are not supported子模块中本地AAR依赖的问题</title>
      <link>//localhost:1313/post/direct-local-aar-file-dependencies-are-not-support/</link>
      <pubDate>Wed, 11 Jun 2025 09:46:51 +0800</pubDate>
      <guid>//localhost:1313/post/direct-local-aar-file-dependencies-are-not-support/</guid>
      <description>在Android开发中，当子模块中引用本地aar包的时候，release包会打包失败，提示Direct local .aar file dependencies are not supported。而且Android Studio的新版本中已经找不到直接依赖本地AAR文件的选项了。&#xA;解决方案 我采用的解决方案是在构建过程开始前，将这些AAR文件发布到本地Maven仓库中。下面是具体实现方法：&#xA;1. 配置构建脚本 首先，在封装模块的build.gradle文件中添加必要的插件和配置：&#xA;plugins { id &amp;#39;com.android.library&amp;#39; id &amp;#39;kotlin-android&amp;#39; id &amp;#39;maven-publish&amp;#39; } // 确保所有项目都能访问本地Maven仓库 parent.allprojects { repositories { mavenLocal() } } 2. 配置发布任务 接下来，配置发布任务将AAR文件发布到本地Maven仓库：&#xA;publishing { publications { libOne(MavenPublication) { groupId &amp;#39;com.example.library&amp;#39; artifactId &amp;#39;module-one&amp;#39; version &amp;#39;1.0&amp;#39; artifact(&amp;#34;$libsDirName/module-one.aar&amp;#34;) } libTwo(MavenPublication) { groupId &amp;#39;com.example.library&amp;#39; artifactId &amp;#39;module-two&amp;#39; version &amp;#39;1.0&amp;#39; artifact(&amp;#34;$libsDirName/module-two.aar&amp;#34;) } libThree(MavenPublication) { groupId &amp;#39;com.example.library&amp;#39; artifactId &amp;#39;module-three&amp;#39; version &amp;#39;1.0&amp;#39; artifact(&amp;#34;$libsDirName/module-three.aar&amp;#34;) } } } 3.</description>
    </item>
    <item>
      <title>Android录音、播放音乐，跳动效果动画自定义VIew</title>
      <link>//localhost:1313/archives/178/</link>
      <pubDate>Tue, 27 Aug 2019 12:22:09 +0000</pubDate>
      <guid>//localhost:1313/archives/178/</guid>
      <description>实现了Android录音，语音输入时的竖线波纹动画效果和音乐播放时的跳动效果&#xA;效果 实现原理 实现了两种运动效果：&#xA;1.从左到右移动 假设柱状图的高度是一个对列&#xA;27,17,38,91,38,24,8,60,38,14,8&#xA;8,27,17,38,91,38,24,8,60,38,14&#xA;14,8,27,17,38,91,38,24,8,60,38&#xA;从左到右移动实际上就是不断的将队列中的最后一个插入到队列的第一个。&#xA;代码：&#xA;2.上下跳动 假设柱状图是一个队列&#xA;27,17,38,91,38,24,8,60,38,14,8&#xA;上下跳动就是将队列的高度，从0%-100%变化&#xA;代码：&#xA;然后在onDraw绘制时高度*valueAnimatorOffset&#xA;绘制 代码：&#xA;地址 https://github.com/xfans/VoiceWaveView</description>
    </item>
    <item>
      <title>Linux下安装网络环境模拟工具augmented-traffic-control</title>
      <link>//localhost:1313/archives/56/</link>
      <pubDate>Thu, 23 Nov 2017 12:10:48 +0000</pubDate>
      <guid>//localhost:1313/archives/56/</guid>
      <description>augmented-traffic-control A tool to simulate network conditions,Facebook提供的一款网络环境模拟工具，可以使用他来测试App在各种网络环境下的问题。&#xA;安装环境要求 Python2.7、Django1.10.+&#xA;以下在Manjora下的安装命令&#xA;切换Python环境到Python2.7 安装pip sudo pacman -S python2-pip&#xA;安装Django1.10.+ sudo pip install Django==1.10.8&#xA;安装ATC 安装lib sudo pacman -S pip install atc_thrift atcd django-atc-api django-atc-demo-ui django-atc-profile-storage&#xA;Django配置 django-admin startproject atcui&#xA;cd atcui&#xA;修改atcui/settings.py中的INSTALLED_APPS 修改atcui/urls.py中的urlpatterns及引用 更新数据库 python manage.py migrate&#xA;创建虚拟Ap Linux开启虚拟AP&#xA;启动ATC sudo atcd --atcd-wan wlp3s0 --atcd-lan ap0&#xA;注意：wlp3s0是我的无线网卡，ap0是我创建的虚拟ap网卡&#xA;设置错误可能出现：https://github.com/facebook/augmented-traffic-control/issues/239&#xA;启动ATCUI python manage.py runserver 0.0.0.0:8000&#xA;导入默认配置 下载该路径下的文件https://github.com/facebook/augmented-traffic-control/tree/master/utils 运行导入命令 ./restore-profiles.sh localhost:8000&#xA;手机使用ATC 使用Android、iOS 的浏览器访问&#xA;ip:8000 ip为你电脑的ip</description>
    </item>
    <item>
      <title>Typecho-Android客户端开发</title>
      <link>//localhost:1313/archives/18/</link>
      <pubDate>Fri, 29 Sep 2017 11:44:41 +0000</pubDate>
      <guid>//localhost:1313/archives/18/</guid>
      <description>协议 XML-RPC_wp协议:https://codex.wordpress.org/XML-RPC_wp 地址:http://xxxx.com/xmlrpc Typecho XML-RPC协议:https://github.com/typecho/typecho/blob/master/var/Widget/XmlRpc.php#L2249-L2322 Demo XML-RPC_wp协议Demo:https://github.com/xfans/android-xmlrpc1 Typecho XML-RPC返回数据:IXR/Value.php </description>
    </item>
    <item>
      <title>Using AndroidSVG with ImageView</title>
      <link>//localhost:1313/archives/8/</link>
      <pubDate>Fri, 29 Sep 2017 11:35:09 +0000</pubDate>
      <guid>//localhost:1313/archives/8/</guid>
      <description>地址:http://bigbadaboom.github.io/androidsvg/use_with_ImageView.html&#xA;Github:https://github.com/BigBadaboom/androidsvg</description>
    </item>
  </channel>
</rss>

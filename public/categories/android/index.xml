<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on </title>
    <link>/categories/android/</link>
    <description>Recent content in Android on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Oct 2021 06:42:25 +0000</lastBuildDate><atom:link href="/categories/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>View沿着Path移动pathMeasure</title>
      <link>/archives/388/</link>
      <pubDate>Wed, 13 Oct 2021 06:42:25 +0000</pubDate>
      
      <guid>/archives/388/</guid>
      <description>Todo </description>
    </item>
    
    <item>
      <title>launcher 使用windowIsTranslucent引发的bug</title>
      <link>/archives/382/</link>
      <pubDate>Tue, 07 Sep 2021 09:01:19 +0000</pubDate>
      
      <guid>/archives/382/</guid>
      <description>说明 把launcher的theme添加
&amp;lt;item name=&amp;quot;android:windowIsTranslucent&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
会引起生命周期的异常，引发home键无效等bug。
解决方法 使用
&amp;lt;item name=&amp;quot;android:windowBackground&amp;quot;&amp;gt;@android:color/transparent&amp;lt;/item&amp;gt;
&amp;lt;item name=&amp;quot;android:windowShowWallpaper&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;
代替</description>
    </item>
    
    <item>
      <title>替换口袋阅上的Kindle/微信阅读应用</title>
      <link>/archives/346/</link>
      <pubDate>Wed, 19 Aug 2020 02:58:20 +0000</pubDate>
      
      <guid>/archives/346/</guid>
      <description>说明： 在未刷机的情况下，口袋阅1的默认桌面如下：
自己安装的程序无法在桌面上显示，而桌面上的kindle又不经常使用。可以改为，点击Kindle进入自己安装的程序，比如：点击Kindle进入koreader。
方法： 实质上就是，自己编写一个与Kindle包名相同的程序，启动该程序时，启动你设置的程序。核心代码如下，很简单：
可以使用已经编译好的程序：
安装后输入要替换的包名，点击确认即可。然后点击桌面的Kindle图标即可进入设置的app。注意：安装该程序后，无法安装Kindle app。包名冲突。
卸载方法：adb uninstall com.amazon.kindlefc
地址： 下载地址：http://img.xfans.me/download/kdy-replace-release.apk
代码地址：https://github.com/xfans/KdyReplace</description>
    </item>
    
    <item>
      <title>Flutter实现的gitee客户端(仿github)</title>
      <link>/archives/307/</link>
      <pubDate>Wed, 01 Apr 2020 11:36:01 +0000</pubDate>
      
      <guid>/archives/307/</guid>
      <description>说明 模仿github客户端的UI,使用flutter实现
地址:https://github.com/xfans/flutter_gitee
地址:https://gitee.com/xfans/flutter_gitee</description>
    </item>
    
    <item>
      <title>retrofit2源码及请求流程分析</title>
      <link>/archives/335/</link>
      <pubDate>Wed, 22 Jan 2020 16:25:00 +0000</pubDate>
      
      <guid>/archives/335/</guid>
      <description>1.创建Retrofit对象 2.创建Service接口 retrofit.create方法为Service创建动态代理，可以说是Retrofit的核心。
3.创建调用API的Call对象 1.当调用Service中定义的方法时，会调用retrofit.create创建的动态代理，调用Proxy._newProxyInstance_中InvocationHandler的invoke方法,创建流程如下:
4.发起网络请求 请求网络的流程如下:
异步请求和同步类似，这里就不分析了。</description>
    </item>
    
    <item>
      <title>okhttp3源码及请求流程分析</title>
      <link>/archives/329/</link>
      <pubDate>Fri, 17 Jan 2020 04:07:00 +0000</pubDate>
      
      <guid>/archives/329/</guid>
      <description>okhttp3请求流程图如下</description>
    </item>
    
    <item>
      <title>自定义View实现图片地图,SVG室内地图</title>
      <link>/archives/221/</link>
      <pubDate>Fri, 29 Nov 2019 12:22:45 +0000</pubDate>
      
      <guid>/archives/221/</guid>
      <description>目标 实现一个室内地图,地图使用图片,svg格式,能够实现Marker,Polyline,放大,缩小等功能.
实现方法 其中的难点主要是,图像经过放大缩小后Marker\Polyline等坐标的对应关系.
地址 https://github.com/xfans/imagemap</description>
    </item>
    
    <item>
      <title>某微信群控工具逆向记录</title>
      <link>/archives/208/</link>
      <pubDate>Thu, 28 Nov 2019 13:03:10 +0000</pubDate>
      
      <guid>/archives/208/</guid>
      <description>说明 某微信群控软件,软件使用PC控制手机端实现对微信的群控,有PC端控制软件及android端控制软件,android端使用xposed实现对微信的控制.
逆向思路 逆向的目标是跨过PC端,使用自己的系统实现对android端的控制.因此要破解的是PC端与android端的通信协议.
逆向过程 1.熟悉软件 首先熟悉软件的功能,使用方法,常见的提示等,方便在后续逆向时能更好的理解代码.
2.分析逆向代码 使用jadx查看逆向出的伪java代码,通过分析代码最终找到pc端与android端是通过socket进行通信的.socket报文解析代码如下:
根据代码可以看出报文格式:
前4个字节为报文长度,最后一个字节为结束标示,中间为消息内容,消息内容是protobuff格式.
3.编写测试代码,逆向protobuff 根据逆向得到的消息格式尝试编写控制端,为了方便直接使用mina库实现socket.报文的编码解码很简单,复杂的是消息内容protobuff文件的逆向.
protobuff是google推出的数据格式化协议,之前没有用过pb但使用过facebook的thrift,原理上大体一致.
根据proto与java类型的对应关系,可以使用java的逆向文件反推出proto文件,然后再使用proto文件就可以生成java文件.反推比较复杂点就是注意required/optional/repeated限定符的使用.
生成protobuff的java类后就可以编写mina编写socket的编解码类了.Decode方法如下:
encode方法同理就不再贴了.
测试socket通信 要进行通信测试,首先要知道传递的参数有哪些.获取参数最简单的方法就是在protobuff解析的地方打印出log.
先使用baksmali\apktool反编译出smali代码,然后找到相应的地方插入log.然后正常操作群控工具拿到相应的log即可.具体操作步骤就不详细写了.
后续根据log中的信息,构造出protobuff对象即可与群控app正常通信.
相关链接 JADXhttps://github.com/skylot/jadx
Linux下的逆向工具集https://github.com/APK-Multi-Tool/APK-Multi-Tool-Linux</description>
    </item>
    
    <item>
      <title>Android录音、播放音乐，跳动效果动画自定义VIew</title>
      <link>/archives/178/</link>
      <pubDate>Tue, 27 Aug 2019 12:22:09 +0000</pubDate>
      
      <guid>/archives/178/</guid>
      <description>实现了Android录音，语音输入时的竖线波纹动画效果和音乐播放时的跳动效果
效果 实现原理 实现了两种运动效果：
1.从左到右移动 假设柱状图的高度是一个对列
27,17,38,91,38,24,8,60,38,14,8
8,27,17,38,91,38,24,8,60,38,14
14,8,27,17,38,91,38,24,8,60,38
从左到右移动实际上就是不断的将队列中的最后一个插入到队列的第一个。
代码：
2.上下跳动 假设柱状图是一个队列
27,17,38,91,38,24,8,60,38,14,8
上下跳动就是将队列的高度，从0%-100%变化
代码：
然后在onDraw绘制时高度*valueAnimatorOffset
绘制 代码：
地址 https://github.com/xfans/VoiceWaveView</description>
    </item>
    
    <item>
      <title>Activity中多个Fragment复杂嵌套页面onSaveInstanceState处理</title>
      <link>/archives/171/</link>
      <pubDate>Fri, 09 Nov 2018 10:39:18 +0000</pubDate>
      
      <guid>/archives/171/</guid>
      <description>按照最简单的原则即可:Activity处理自己的SaveInstanceState,Fragment处理自己的SaveInstanceState,不要调用Activity与Fragment之间数据传递的方法.</description>
    </item>
    
    <item>
      <title>修复一个支付宝概率支付失败的问题</title>
      <link>/archives/305/</link>
      <pubDate>Fri, 30 Mar 2018 15:45:08 +0000</pubDate>
      
      <guid>/archives/305/</guid>
      <description>问题 App中一个遗留的bug,当用户使用支付宝进行支付时会概率出错.并且没有规律.
原因 对比支付宝的的url,发现部分参数中多了+号,程序中对url进行了URLDecoder.&amp;lt;em&amp;gt;decode&amp;lt;/em&amp;gt;(url),导致空格变成了+号,从而导致支付宝报错.</description>
    </item>
    
    <item>
      <title>快速的将Android-async-http升级到OKhttp</title>
      <link>/archives/148/</link>
      <pubDate>Sat, 24 Feb 2018 03:30:45 +0000</pubDate>
      
      <guid>/archives/148/</guid>
      <description>背景 Android-async-http已经不更新了。ps:还为这个库提交过功能https://github.com/android-async-http/android-async-http/pull/840
Android-async-http是基于HttpClient的。
替换方案 将项目中所有的请求代码都替换工作量巨大，也容易出问题。所以采用将Okhttp封装为Android-async-http的方式进行替换。
android-async-http的使用方法:
从代码可以看出,想要快速的替换需要:
1.使用okhttp来实现AsyncHttpClient
2.实现AsyncHttpResponseHandler,FileAsyncHttpResponseHandler,JsonHttpResponseHandler,TextHttpResponseHandler等项目中使用的Handler即可.</description>
    </item>
    
    <item>
      <title>Android7,8的适配</title>
      <link>/archives/145/</link>
      <pubDate>Sat, 24 Feb 2018 03:16:16 +0000</pubDate>
      
      <guid>/archives/145/</guid>
      <description>背景 用户反馈华为Mate10 无法使用App。
升级 targetSdkVersion = 26
遇到的问题 网络请求异常
TransactionTooLargeException
通知渠道
FileUriExposedException
Charles无法抓Https
MODE_WORLD_READABLE no longer supported
BadTokenException 7.1
Not allowed to start service
getRunningServices deprecated in API level 26 As of O, this method is no longer available to third party applications. For backwards compatibility, it will still return the caller&amp;rsquo;s own services.
ps:时间太长了想起来再写，详情有空再整理</description>
    </item>
    
    <item>
      <title>一个bad request http request or invalid response的错误</title>
      <link>/archives/80/</link>
      <pubDate>Fri, 19 Jan 2018 11:56:59 +0000</pubDate>
      
      <guid>/archives/80/</guid>
      <description>问题 部分客户端api报错，特别是8.0系统上，访问api出现bad request http request or invalid response,from ulb错误。
解决步骤 1.服务器联调 服务器端未发现问题，参数都对。服务器上也没有这句错误信息。猜测应该是服务器上层报出来的错误，如负载均衡。
2.用Charles抓包 Charles抓包后，就不会出现该错误了。后来发现Charles对错误报文进行了兼容处理，发给服务器的应该对的。
3.去GIthub查网络库的issues 项目中使用的是,Android-async-http这个库,issues中没有人说8.0中有这个问题，猜想应该是自己代码中的问题。
4.大鲨鱼Wireshark抓包 大鲨鱼Wireshark抓包后会出现该错误，没有看出报文有异常。
比较正确的报文和错误的报文，发现大小不一样。
最终发现（找了好久，反正就是很艰难），错误的报文Header中多了一个空行。
原因 在往Header中添加参数时，有一个参数出现了\n,正常情况下客户端发送报文的时会忽略\n，而有的版本把\n放在了报文中，导致报文格式出错。</description>
    </item>
    
    <item>
      <title>使用SVN下载GitHub单个目录内的文件</title>
      <link>/archives/69/</link>
      <pubDate>Thu, 11 Jan 2018 11:48:29 +0000</pubDate>
      
      <guid>/archives/69/</guid>
      <description>背景 有时候需要在GitHub上下载单个目录里面的文件，而不需要去克隆整个项目，太大的项目克隆起来太慢。
解决方案 GitHub是支持SVN访问的，所以可以使用SVN下载单个目录。
下载master分支 复制浏览器地址栏中的地址，如：
https://github.com/bumptech/glide/tree/master/integration
将tree改为trunk即可。
https://github.com/bumptech/glide/trunk/integration
下载其他分支 如：
https://github.com/bumptech/glide/tree/3.0/integration
将tree改为branches即可。
https://github.com/bumptech/glide/branches/3.0/integration
然后svn checkout 即可。</description>
    </item>
    
    <item>
      <title>在Okhttp中使用HTTPDNS</title>
      <link>/archives/63/</link>
      <pubDate>Wed, 10 Jan 2018 12:06:27 +0000</pubDate>
      
      <guid>/archives/63/</guid>
      <description>背景 用户经常在国外使用App，国外的网络环境更加复杂，经常会出现UnknownHostException的异常，无法解析DNS。
解决方案 当遇到该异常时就需要自己去解析DNS。常用的自己解析DNS的方式有两种
1.自己拿到IP后替换域名（App老的方式） 比如使用dnsjava拿到IP后需要：</description>
    </item>
    
    <item>
      <title>TransactionTooLargeException 的原因</title>
      <link>/archives/53/</link>
      <pubDate>Sun, 12 Nov 2017 13:43:02 +0000</pubDate>
      
      <guid>/archives/53/</guid>
      <description>问题 适配7.0时发生了TransactionTooLargeException的异常.
原因 1.Fragment关闭时会调用onSaveInstanceState,而在onSaveInstanceState中保存了比较大的数据.
2.调用fragment.setArguments(bundle)时，往bundle中放了过大的数据，FragmentManager管理Fragment时saveState报错.
解决方法 由于保存的数据较多,无法确定那个数据比较大,最后使用这个库_toolargetool_定位到数据较大的对象.
将_toolargetool_引入到项目
在Application中初始
这个库会在每次关闭Activity,Fragment时,打印出onSaveInstanceState的对象及大小.如图
查找log中较大的对象,进行相应的处理即可.比如保存到数据库,缩小对象等
相关链接 https://github.com/guardian/toolargetool</description>
    </item>
    
    <item>
      <title>android打印函数调用堆栈</title>
      <link>/archives/46/</link>
      <pubDate>Tue, 10 Oct 2017 08:49:52 +0000</pubDate>
      
      <guid>/archives/46/</guid>
      <description>打印方法调用堆栈 </description>
    </item>
    
    <item>
      <title>Typecho-Android客户端开发</title>
      <link>/archives/18/</link>
      <pubDate>Fri, 29 Sep 2017 11:44:41 +0000</pubDate>
      
      <guid>/archives/18/</guid>
      <description>协议 XML-RPC_wp协议:https://codex.wordpress.org/XML-RPC_wp 地址:http://xxxx.com/xmlrpc Typecho XML-RPC协议:https://github.com/typecho/typecho/blob/master/var/Widget/XmlRpc.php#L2249-L2322 Demo XML-RPC_wp协议Demo:https://github.com/xfans/android-xmlrpc1 Typecho XML-RPC返回数据:IXR/Value.php </description>
    </item>
    
    <item>
      <title>Using AndroidSVG with ImageView</title>
      <link>/archives/8/</link>
      <pubDate>Fri, 29 Sep 2017 11:35:09 +0000</pubDate>
      
      <guid>/archives/8/</guid>
      <description>地址:http://bigbadaboom.github.io/androidsvg/use_with_ImageView.html
Github:https://github.com/BigBadaboom/androidsvg</description>
    </item>
    
  </channel>
</rss>
